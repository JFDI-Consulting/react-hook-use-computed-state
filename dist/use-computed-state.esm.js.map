{"version":3,"file":"use-computed-state.esm.js","sources":["../src/useComputedState.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\nimport { attempt } from \"@jfdi/attempt\";\nimport is from \"@sindresorhus/is\";\n\nconst resolveInitialState = inSt => (is.nullOrUndefined(inSt) ? Date.now() : inSt);\n\nexport const useComputedState = ({ initialState, initialComputedState, computeFn, debug = false }) => {\n    const timestampMode = useRef(is.nullOrUndefined(initialState));\n    const [simpleState, setSimpleState] = useState(resolveInitialState(initialState));\n    const computedState = useRef(initialComputedState);\n    const log = useCallback((...args) => debug && console.log(...args), [debug]);\n\n    const setState = useCallback(\n        newState => {\n            log(\"setState:\", { newState });\n            setSimpleState(newState);\n            if (is.function(computeFn)) {\n                const [e, res] = attempt(() => computeFn(newState, computedState.current));\n                log(\"computedState:\", { e, res });\n                if (e) console.error(e);\n                else computedState.current = res;\n            }\n        },\n        [computeFn, log]\n    );\n\n    const notifyChange = useCallback(() => {\n        log(\"notifyChange\");\n        setState(Date.now());\n    }, [log, setState]);\n\n    const setComputedState = useCallback(\n        newComputedState => {\n            log(\"setComputedState:\", { newComputedState });\n            computedState.current = newComputedState;\n            if (timestampMode.current) setSimpleState(Date.now());\n        },\n        [log]\n    );\n\n    return {\n        state: simpleState,\n        computedState: computedState.current,\n        setState,\n        setComputedState,\n        notifyChange\n    };\n};\n"],"names":["resolveInitialState","inSt","is","nullOrUndefined","Date","now","useComputedState","initialState","initialComputedState","computeFn","debug","timestampMode","useRef","simpleState","setSimpleState","useState","computedState","log","useCallback","console","setState","newState","function","e","res","attempt","current","error","notifyChange","setComputedState","newComputedState","state"],"mappings":";;;;AAIA,MAAMA,mBAAmB,GAAGC,IAAI,IAAKC,EAAE,CAACC,eAAH,CAAmBF,IAAnB,IAA2BG,IAAI,CAACC,GAAL,EAA3B,GAAwCJ,IAA7E;;MAEaK,gBAAgB,GAAG,QAAsE;AAAA,MAArE;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,oBAAhB;AAAsCC,IAAAA,SAAtC;AAAiDC,IAAAA,KAAK,GAAG;AAAzD,GAAqE;AAClG,QAAMC,aAAa,GAAGC,MAAM,CAACV,EAAE,CAACC,eAAH,CAAmBI,YAAnB,CAAD,CAA5B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAACf,mBAAmB,CAACO,YAAD,CAApB,CAA9C;AACA,QAAMS,aAAa,GAAGJ,MAAM,CAACJ,oBAAD,CAA5B;AACA,QAAMS,GAAG,GAAGC,WAAW,CAAC;AAAA,WAAaR,KAAK,IAAIS,OAAO,CAACF,GAAR,CAAY,YAAZ,CAAtB;AAAA,GAAD,EAA6C,CAACP,KAAD,CAA7C,CAAvB;AAEA,QAAMU,QAAQ,GAAGF,WAAW,CACxBG,QAAQ,IAAI;AACRJ,IAAAA,GAAG,CAAC,WAAD,EAAc;AAAEI,MAAAA;AAAF,KAAd,CAAH;AACAP,IAAAA,cAAc,CAACO,QAAD,CAAd;;AACA,QAAInB,EAAE,CAACoB,QAAH,CAAYb,SAAZ,CAAJ,EAA4B;AACxB,YAAM,CAACc,CAAD,EAAIC,GAAJ,IAAWC,OAAO,CAAC,MAAMhB,SAAS,CAACY,QAAD,EAAWL,aAAa,CAACU,OAAzB,CAAhB,CAAxB;AACAT,MAAAA,GAAG,CAAC,gBAAD,EAAmB;AAAEM,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAnB,CAAH;AACA,UAAID,CAAJ,EAAOJ,OAAO,CAACQ,KAAR,CAAcJ,CAAd,EAAP,KACKP,aAAa,CAACU,OAAd,GAAwBF,GAAxB;AACR;AACJ,GAVuB,EAWxB,CAACf,SAAD,EAAYQ,GAAZ,CAXwB,CAA5B;AAcA,QAAMW,YAAY,GAAGV,WAAW,CAAC,MAAM;AACnCD,IAAAA,GAAG,CAAC,cAAD,CAAH;AACAG,IAAAA,QAAQ,CAAChB,IAAI,CAACC,GAAL,EAAD,CAAR;AACH,GAH+B,EAG7B,CAACY,GAAD,EAAMG,QAAN,CAH6B,CAAhC;AAKA,QAAMS,gBAAgB,GAAGX,WAAW,CAChCY,gBAAgB,IAAI;AAChBb,IAAAA,GAAG,CAAC,mBAAD,EAAsB;AAAEa,MAAAA;AAAF,KAAtB,CAAH;AACAd,IAAAA,aAAa,CAACU,OAAd,GAAwBI,gBAAxB;AACA,QAAInB,aAAa,CAACe,OAAlB,EAA2BZ,cAAc,CAACV,IAAI,CAACC,GAAL,EAAD,CAAd;AAC9B,GAL+B,EAMhC,CAACY,GAAD,CANgC,CAApC;AASA,SAAO;AACHc,IAAAA,KAAK,EAAElB,WADJ;AAEHG,IAAAA,aAAa,EAAEA,aAAa,CAACU,OAF1B;AAGHN,IAAAA,QAHG;AAIHS,IAAAA,gBAJG;AAKHD,IAAAA;AALG,GAAP;AAOH;;;;"}